////
//// This file presents the default configuration used by both the `zenoh-plugin-ros2dds` plugin and the `zenoh-bridge-ros2dds` standalone executable.
//// The "ros2" JSON5 object below can be used as such in the "plugins" part of a config file for the zenoh router (zenohd).
////
{
  plugins: {
    ////
    //// ROS2 related configuration
    //// All settings are optional and are unset by default - uncomment the ones you want to set
    //// MOST OF ROS2 CONFIGURATION IN OUR USE CASE IS DONE IN ROS2 DIRECTLY
    ros2dds: {
      //allow: {
      //  publishers: ["/tf", "/tf_static", ".*/current_phase", ], 
      //  subscribers: ["/chatter", ".*/in/.*", ".*/out/.*", "/tf", "/tf_static"],
      //   service_servers: ["/sim/get_system_info"],
      //   service_clients: [],
      //   action_servers: [".*/rotate_absolute"],
      //   action_clients: [],
      //},
      deny: {
        publishers: [".*/fmu/(?!.*manual_control_setpoint).*"], 
        subscribers: [".*/fmu/.*"],
      //   service_servers: [".*/set_parameters"],
      //   service_clients: [".*/set_parameters"],
      //   action_servers: [],
      //   action_clients: [],
      },

    },

  },

// Required in gcs_user
  // /fmu/out/manual_control_setpoint - published by 1st drone 

// Required in gcs_background
// f'/px4_{i}/out/current_phase' - Published by drones

  // Required in load
  // f'/px4_{i}/out/current_phase' - Published by drones

  // Required in drone
  // f'/load_{self.load_id}/in/desired_attitude', - published by gcs_background
  // f'/load_{self.load_id}/in/desired_local_position' - published by gcs_background
  // (f'{self.ns}/out/pixhawk_status' - published by corresponding pixhawk node) - note already local

// Required in pixhawk
// "/px4_" + std::to_string(this->first_drone_num_) + "/out/global_init_pose" - published by all Pixhawks
// (f'/px4_{X}/out/current_phase' - Published by corresponding drone) - note already local


  ////
  //// Zenoh related configuration.
  //// Only the most relevant sections are displayed here.
  //// For a complete view of configuration possibilities, see https://github.com/eclipse-zenoh/zenoh/blob/main/DEFAULT_CONFIG.json5
  //// WE SHOULD REVISIT THE CONFIGURATION WHEN WE DO DECENTRALIZED

  ////
  //// mode: The bridge's mode (router, peer or client)
  //// SET TO 'ROUTER' FOR TESTING BETWEEN TWO DRONES. 
  //// SET TO 'ROUTER' FOR THE GCS ONLY AND 'CLIENT' FOR ALL DRONES IN
  //// CENTRALIZED EXPERIMENT, SET TO 'PEERS' FOR DRONES IN DECENTRALIZED
  //// EXPERIMENTS
  mode: "router", 

  ////
  //// Which endpoints to connect to. E.g. tcp/localhost:7447.
  //// By configuring the endpoints, it is possible to tell zenoh which remote router or other zenoh-bridge-ros2dds to connect to at startup.
  //// SET TO THE OTHER DRONE WHEN TESTING BETWEEN TWO DRONES,
  //// SET TO THE GCS IN REAL EXPERIMENTS
  //// I WOULD TRY WITH TCP FIRST AND IF IT DOESN'T WORK WITH THREE DRONES
  //// I WOULD SWITCH TO UDP
  connect: {
    endpoints: [
      //"tcp/192.168.3.29:7447", //Desktop
      "tcp/192.168.3.102:7447", //Laptop (BilabRouter)
    ]
  },

  ////
  //// NOT NEEDED FOR CENTRALIZED
  // listen: {
  //  endpoints: [
  //    // "<proto>/<ip>:<port>"
  //  ]
  //},

}
